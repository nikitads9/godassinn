version: "3.8"

networks:
  app_net:
    driver: bridge
  elk:
    driver: bridge


volumes:
  postgres-volume:
  certificates-volume:
  prometheus-volume:
  jaeger-volume:


services:
  # NGINX load balancer and proxy
  nginx-entrypoint:
    image: nginx
    hostname: nginx-entrypoint
    container_name: nginx-entrypoint
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    volumes:
      - certificates-volume:/etc/ssl/certs
      - ./booking-schedule/backend/deploy/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
      - 443:443
    networks:
      - app_net
    depends_on:
      - booking
      - auth
  
  # Postgresql database
  db:
    container_name: booking-storage
    image: postgres:16-alpine3.19
    environment:
      - "POSTGRES_DB=${DB_NAME}"
      - "POSTGRES_USER=${DB_USER}"
      - "POSTGRES_PASSWORD=${DB_PASSWORD}"
      - "PGDATA=${PGDATA}"
    volumes: 
      - postgres-volume:/var/lib/postgresql/data
    #  - ./deploy/database/init.sql:/docker-entrypoint-initdb.d/init.sql 
    ports:
      - "${DB_PORT}:${DB_PORT}"
    expose:
    - "${DB_PORT}" 
    command: -p ${DB_PORT}
    networks:
      - app_net

  # Booking service
  booking:
    container_name: booking
    build:
      context: .
      dockerfile: ./booking-schedule/backend/deploy/bookings/Dockerfile
    image: nikitads9/booking-schedule:booking
    volumes:
      - certificates-volume:/etc/ssl/certs
    ports:
      - "${BOOKINGS_PORT}:${BOOKINGS_PORT}"
    depends_on:
      - db
      - jaeger
    networks:
      - app_net
    deploy:
      resources:
        limits:
          memory: 200m
          cpus: "0.50"
    logging:
      driver: gelf
      options:
        gelf-address: 'udp://:12201'
        tag: 'booking'

  # Service for signing in and up for users
  auth:
    container_name: auth
    build:
      context: .
      dockerfile: ./booking-schedule/backend/deploy/auth/Dockerfile
    image: nikitads9/booking-schedule:auth
    volumes:
      - certificates-volume:/etc/ssl/certs
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    depends_on:
      - db
      - jaeger
    networks:
      - app_net
    deploy:
      resources:
        limits:
          memory: 200m
          cpus: "0.70"
    logging:
      driver: gelf
      options:
        gelf-address: 'udp://:12201'
        tag: 'auth'

  # Goose migrations manager
  migrator:
    container_name: migrator
    build: $MIGRATION_DIR
    restart: on-failure
    image: nikitads9/booking-schedule:migrator
    environment:
      - "GOOSE_DRIVER=postgres"
      - "GOOSE_DBSTRING=host=${DB_HOST} port=${DB_PORT} dbname=${DB_NAME} user=${DB_USER} password=${DB_PASSWORD} sslmode=${DB_SSL}"
      - "MIGRATION_DIR=${MIGRATION_DIR}"
    depends_on:
      - db
    networks:
      - app_net

  # Periodic task agent
  scheduler:
    container_name: scheduler
    build:
      context: .
      dockerfile: ./booking-schedule/backend/deploy/scheduler/Dockerfile
    image: nikitads9/booking-schedule:scheduler
    restart: unless-stopped
    environment:
      - "DB_NAME=${DB_NAME}"
      - "DB_USERNAME=${DB_USER}"
      - "DB_PASSWORD=${DB_PASSWORD}"
      - "DB_HOST=${DB_HOST}"
    depends_on:
      - db
      - queue
    networks:
      - app_net
    deploy:
      resources:
        limits:
          memory: 200m
          cpus: "0.30"
    logging:
      driver: gelf
      options:
        gelf-address: 'udp://:12201'
        tag: 'scheduler'

  # Template for sender service
  sender:
    container_name: sender
    build:
      context: .
      dockerfile: ./booking-schedule/backend/deploy/sender/Dockerfile
    image: nikitads9/booking-schedule:sender
    restart: unless-stopped
    depends_on:
      - queue
    networks:
      - app_net
    deploy:
      resources:
        limits:
          memory: 200m
          cpus: "0.30"
    logging:
      driver: gelf
      options:
        gelf-address: 'udp://:12201'
        tag: 'sender'

  # RabbitMQ AMQP queue
  queue:
    container_name: queue
    image: rabbitmq:3.13.0-management-alpine
    environment:
      RABBITMQ_DEFAULT_PASS: ${AMQP_PASS}
      RABBITMQ_DEFAULT_USER: ${AMQP_USER}
      RABBITMQ_DEFAULT_VHOST: ${AMQP_VHOST}
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    ports:
      - "${AMQP_PORT}:${AMQP_PORT}"
      - "15672"
    expose:
      - "${AMQP_PORT}"
    networks:
      - app_net

  # Jaeger tracing and monitoring
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    command:
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=${PROMETHEUS_ADDR}"
      - "--prometheus.query.support-spanmetrics-connector=true"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=${PROMETHEUS_ADDR}
      #- SPAN_STORAGE_TYPE=elasticsearch
      #- ES_TAGS_AS_FIELDS_ALL=true
      #- ES_SERVER_URLS=http://elasticsearch:9200
      #- ES_USERNAME=elastic
      #- ES_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      #- "5775:5775/udp" # agent accept zipkin.thrift over compact thrift protocol (deprecated, used by legacy clients only)
      #- "6831:6831/udp" # agent accept jaeger.thrift over compact thrift protocol
      #- "6832:6832/udp" # agent accept jaeger.thrift over binary thrift protocol
      #- "5778:5778" # agent serve configs
      #- "16686:16686" # query serve frontend (Jaeger UI)
      #- "14268:14268" # collector accept jaeger.thrift directly from clients
      #- "14250:14250" # collector accept model.proto
      #- "9411:9411" # collector Zipkin compatible endpoint (optional)
      - '14269:14269'
      - '4317:4317' # OTLP collector grpc
      - '4318:4318' # OTLP collector http
      - '16686:16686'
      - '16685:16685'
    expose:
      - '4317'
      - '14269'
    networks:
      - app_net
      - elk

  # Prometheus monitoring and TSDB
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus' #Where Prometheus writes its database. Defaults to data/.
      - '--storage.tsdb.retention.time=1d' #When to remove old data. Defaults to 15d. Overrides storage.tsdb.retention if this flag is set to anything other than default.
      - '--storage.tsdb.retention.size=1GB'
      - '--enable-feature=otlp-write-receiver'
    volumes:
      - ./booking-schedule/backend/deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-volume:/prometheus
    ports:
      - '9090:9090'
    networks:
      - app_net

  # OpenTelemetry Collector
  otelcol:
    container_name: otelcol
    image: otel/opentelemetry-collector-contrib:latest
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml" ]
    environment:
      - DB_MONITOR_USER=${DB_MONITOR_USER}
      - DB_MONITOR_PASSWORD=${DB_MONITOR_PASSWORD}
      - DB_NAME=${DB_NAME}
    volumes:
      - ./booking-schedule/backend/deploy/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
    expose:
      - '4318'
    ports:
      - '14318:4318'
    depends_on:
      - jaeger
    networks:
      - app_net
    deploy:
      resources:
        limits:
          memory: 200M

  search:
    container_name: search
    build:
      context: ./search
      dockerfile: ./dockerfile
    restart: unless-stopped
    environment:
      - SPRING_DATASOURCE_URL=jdbc:posygtresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      - SPRING_DATASOURCE_USER=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
    depends_on: 
      - db
      - booking
    networks:
      - app_net